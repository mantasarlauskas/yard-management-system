// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using yard_management_system.Models;

namespace yard_management_system.Migrations
{
    [DbContext(typeof(yard_management_systemContext))]
    partial class yard_management_systemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("yard_management_system.Models.Cargo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("EntryID");

                    b.Property<int>("OrderID");

                    b.Property<int>("RampID");

                    b.Property<string>("RegistrationNumber");

                    b.Property<int>("State");

                    b.Property<string>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("EntryID");

                    b.HasIndex("OrderID");

                    b.HasIndex("RampID");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("yard_management_system.Models.CargoTimeSlot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoID");

                    b.Property<int>("TimeSlotID");

                    b.HasKey("ID");

                    b.HasIndex("CargoID");

                    b.HasIndex("TimeSlotID");

                    b.ToTable("CargoTimeSlot");
                });

            modelBuilder.Entity("yard_management_system.Models.Contractor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderContractID");

                    b.Property<int>("TypeOfContractor");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Contractor");
                });

            modelBuilder.Entity("yard_management_system.Models.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoID");

                    b.Property<string>("Text");

                    b.HasKey("ID");

                    b.HasIndex("CargoID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("yard_management_system.Models.MessageReceiver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractorID");

                    b.Property<int>("MessageID");

                    b.HasKey("ID");

                    b.HasIndex("ContractorID");

                    b.HasIndex("MessageID");

                    b.ToTable("MessageReceiver");
                });

            modelBuilder.Entity("yard_management_system.Models.ObjectChange", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("UserCreatorId");

                    b.HasKey("ID");

                    b.HasIndex("UserCreatorId");

                    b.ToTable("ObjectChange");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ObjectChange");
                });

            modelBuilder.Entity("yard_management_system.Models.OrderContract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CargoID");

                    b.Property<int>("ContractorID");

                    b.HasKey("ID");

                    b.HasIndex("CargoID");

                    b.HasIndex("ContractorID");

                    b.ToTable("OrderContract");
                });

            modelBuilder.Entity("yard_management_system.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Create");

                    b.Property<bool>("Delete");

                    b.Property<bool>("Modify");

                    b.Property<int>("PermissionName");

                    b.Property<int>("PermissionsSetID");

                    b.Property<bool>("Read");

                    b.HasKey("ID");

                    b.HasIndex("PermissionsSetID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("yard_management_system.Models.PermissionsSet", b =>
                {
                    b.Property<int>("PermissionsSetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("UserRightID");

                    b.HasKey("PermissionsSetID");

                    b.HasIndex("UserRightID");

                    b.ToTable("PermissionsSet");
                });

            modelBuilder.Entity("yard_management_system.Models.TimeSlot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked");

                    b.Property<DateTime>("Date");

                    b.Property<int>("RampID");

                    b.Property<bool>("Reserved");

                    b.Property<string>("TimeDuration");

                    b.Property<string>("TimeFrom");

                    b.Property<int>("TypeOfTimeSlot");

                    b.HasKey("ID");

                    b.HasIndex("RampID");

                    b.ToTable("TimeSlot");
                });

            modelBuilder.Entity("yard_management_system.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked");

                    b.Property<string>("EMail");

                    b.Property<string>("FirstName");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNo");

                    b.Property<string>("SecondName");

                    b.Property<string>("UserName");

                    b.Property<int?>("UserRightID");

                    b.HasKey("UserID");

                    b.HasIndex("UserRightID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("yard_management_system.Models.UserRight", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRight");
                });

            modelBuilder.Entity("yard_management_system.Models.Entry", b =>
                {
                    b.HasBaseType("yard_management_system.Models.ObjectChange");

                    b.Property<bool>("Blocked");

                    b.Property<DateTime>("BlockedFrom");

                    b.Property<DateTime>("BlockedTo");

                    b.Property<string>("Code");

                    b.Property<int>("EntryID");

                    b.ToTable("Entry");

                    b.HasDiscriminator().HasValue("Entry");
                });

            modelBuilder.Entity("yard_management_system.Models.Order", b =>
                {
                    b.HasBaseType("yard_management_system.Models.ObjectChange");

                    b.Property<int>("OrderID");

                    b.Property<int>("State");

                    b.ToTable("Order");

                    b.HasDiscriminator().HasValue("Order");
                });

            modelBuilder.Entity("yard_management_system.Models.Ramp", b =>
                {
                    b.HasBaseType("yard_management_system.Models.ObjectChange");

                    b.Property<bool>("Blocked")
                        .HasColumnName("Ramp_Blocked");

                    b.Property<DateTime>("BlockedFrom")
                        .HasColumnName("Ramp_BlockedFrom");

                    b.Property<DateTime>("BlockedTo")
                        .HasColumnName("Ramp_BlockedTo");

                    b.Property<int>("CategoryOfRamp");

                    b.Property<string>("Code")
                        .HasColumnName("Ramp_Code");

                    b.Property<int>("RampID");

                    b.ToTable("Ramp");

                    b.HasDiscriminator().HasValue("Ramp");
                });

            modelBuilder.Entity("yard_management_system.Models.Cargo", b =>
                {
                    b.HasOne("yard_management_system.Models.Entry", "Entry")
                        .WithMany("Cargos")
                        .HasForeignKey("EntryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("yard_management_system.Models.Order", "Order")
                        .WithMany("Cargos")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("yard_management_system.Models.Ramp", "Ramp")
                        .WithMany("Cargos")
                        .HasForeignKey("RampID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.CargoTimeSlot", b =>
                {
                    b.HasOne("yard_management_system.Models.Cargo", "Cargo")
                        .WithMany("CargoTimeSlots")
                        .HasForeignKey("CargoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("yard_management_system.Models.TimeSlot", "TimeSlot")
                        .WithMany("CargoTimeSlots")
                        .HasForeignKey("TimeSlotID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.Contractor", b =>
                {
                    b.HasOne("yard_management_system.Models.User", "User")
                        .WithMany("Contractor")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.Message", b =>
                {
                    b.HasOne("yard_management_system.Models.Cargo", "Cargo")
                        .WithMany("Messages")
                        .HasForeignKey("CargoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.MessageReceiver", b =>
                {
                    b.HasOne("yard_management_system.Models.Contractor", "Contractor")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("yard_management_system.Models.Message", "Message")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.ObjectChange", b =>
                {
                    b.HasOne("yard_management_system.Models.User", "UserCreator")
                        .WithMany("UserIsCreator")
                        .HasForeignKey("UserCreatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.OrderContract", b =>
                {
                    b.HasOne("yard_management_system.Models.Cargo", "Cargo")
                        .WithMany("OrderContracts")
                        .HasForeignKey("CargoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("yard_management_system.Models.Contractor", "Contractor")
                        .WithMany("OrderContracts")
                        .HasForeignKey("ContractorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.Permission", b =>
                {
                    b.HasOne("yard_management_system.Models.PermissionsSet", "PermissionsSet")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionsSetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.PermissionsSet", b =>
                {
                    b.HasOne("yard_management_system.Models.UserRight", "UserRight")
                        .WithMany("PermissionsSets")
                        .HasForeignKey("UserRightID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.TimeSlot", b =>
                {
                    b.HasOne("yard_management_system.Models.Ramp", "Ramp")
                        .WithMany("TimeSlots")
                        .HasForeignKey("RampID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("yard_management_system.Models.User", b =>
                {
                    b.HasOne("yard_management_system.Models.UserRight")
                        .WithMany("Users")
                        .HasForeignKey("UserRightID");
                });

            modelBuilder.Entity("yard_management_system.Models.UserRight", b =>
                {
                    b.HasOne("yard_management_system.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
